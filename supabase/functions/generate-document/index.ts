import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import "https://deno.land/std@0.168.0/dotenv/load.ts";

// Correto: use apenas o nome da vari√°vel de ambiente
const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL');
const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');

console.log('OPENAI_API_KEY:', openAIApiKey);
console.log('SUPABASE_URL:', supabaseUrl);
console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseKey);

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const documentTemplates = {
  dfd: `
# DOCUMENTO DE FORMALIZA√á√ÉO DE DEMANDA (DFD)

## 1. DESCRI√á√ÉO DA NECESSIDADE
{descricao_necessidade}

## 2. JUSTIFICATIVA
{justificativa}

## 3. OBJETO DA CONTRATA√á√ÉO
{objeto}

## 4. ESTIMATIVA DE CUSTOS
Valor estimado: {valor_estimado}

## 5. PRAZO DE EXECU√á√ÉO
{prazo_execucao}

## 6. MODALIDADE LICITAT√ìRIA SUGERIDA
{modalidade_licitacao}

## 7. CRIT√âRIO DE JULGAMENTO
{criterio_julgamento}

## 8. FUNDAMENTA√á√ÉO LEGAL
Este documento est√° em conformidade com o Art. 18 da Lei 14.133/2021.
`,
  etp: `
# ESTUDO T√âCNICO PRELIMINAR (ETP)

## 1. OBJETO
{objeto}

## 2. JUSTIFICATIVA DA CONTRATA√á√ÉO
{justificativa}

## 3. DESCRI√á√ÉO DETALHADA
{descricao_detalhada}

## 4. ESPECIFICA√á√ïES T√âCNICAS
{especificacoes_tecnicas}

## 5. AN√ÅLISE DE VIABILIDADE
Esta contrata√ß√£o √© vi√°vel considerando os aspectos t√©cnicos, econ√¥micos e operacionais apresentados.

## 6. ESTIMATIVA DE CUSTOS
Valor estimado: {valor_estimado}

## 7. PRAZO DE EXECU√á√ÉO
{prazo_execucao}

## 8. FORMA DE PAGAMENTO
{forma_pagamento}

## 9. GARANTIAS
{garantias}

## 10. SUSTENTABILIDADE AMBIENTAL
A contrata√ß√£o observar√° crit√©rios de sustentabilidade ambiental conforme legisla√ß√£o vigente.

## 11. FUNDAMENTA√á√ÉO LEGAL
Este documento est√° em conformidade com o Art. 18, ¬ß 1¬∫ da Lei 14.133/2021.
`,
  tr: `
# TERMO DE REFER√äNCIA (TR)

## 1. OBJETO
{objeto}

## 2. ESPECIFICA√á√ïES
{especificacoes}

## 3. OBRIGA√á√ïES DA CONTRATADA
{obrigacoes_contratada}

## 4. OBRIGA√á√ïES DO CONTRATANTE
{obrigacoes_contratante}

## 5. PRAZO DE EXECU√á√ÉO
{prazo_execucao}

## 6. FORMA DE PAGAMENTO
{forma_pagamento}

## 7. PENALIDADES
{penalidades}

## 8. CRIT√âRIOS DE ACEITA√á√ÉO
{criterios_aceitacao}

## 9. FISCALIZA√á√ÉO
A execu√ß√£o do contrato ser√° acompanhada e fiscalizada por servidor designado pela Administra√ß√£o.

## 10. FUNDAMENTA√á√ÉO LEGAL
Este documento est√° em conformidade com o Art. 40 da Lei 14.133/2021.
`
};

// Defini√ß√£o do tipo para a resposta da OpenAI
type OpenAIResponse = {
  choices: {
    message: {
      content: string;
    }
  }[];
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, userId } = await req.json();
    
    if (!openAIApiKey) {
      throw new Error('OpenAI API key n√£o configurada');
    }

    // Analisar a mensagem para extrair informa√ß√µes do documento
    const analysisResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: `Voc√™ √© um especialista em licita√ß√µes p√∫blicas. Analise a mensagem do usu√°rio e extraia informa√ß√µes para gerar um documento (DFD, ETP ou TR).

Responda APENAS com um JSON v√°lido no seguinte formato:
{
  "tipo_documento": "dfd|etp|tr",
  "dados": {
    "objeto": "texto",
    "descricao_necessidade": "texto",
    "justificativa": "texto",
    "valor_estimado": "texto",
    "prazo_execucao": "texto",
    "modalidade_licitacao": "texto",
    "criterio_julgamento": "texto",
    "especificacoes_tecnicas": "texto",
    "especificacoes": "texto",
    "obrigacoes_contratada": "texto",
    "obrigacoes_contratante": "texto",
    "forma_pagamento": "texto",
    "penalidades": "texto",
    "criterios_aceitacao": "texto",
    "garantias": "texto",
    "descricao_detalhada": "texto"
  },
  "titulo": "t√≠tulo do documento"
}

Se a mensagem n√£o for uma solicita√ß√£o de documento, retorne: {"erro": "N√£o √© uma solicita√ß√£o de documento"}`
          },
          {
            role: 'user',
            content: message
          }
        ],
        temperature: 0.3,
      }),
    });

    const analysisData = await analysisResponse.json() as OpenAIResponse;
    console.log('Resposta da OpenAI:', analysisData);
    console.log('Conte√∫do retornado pela OpenAI:', analysisData.choices[0]?.message?.content);
    let analysis;
    try {
      analysis = JSON.parse(analysisData.choices[0].message.content);
    } catch (e) {
      console.error('Erro ao fazer parse do conte√∫do da OpenAI:', analysisData.choices[0]?.message?.content, e);
      return new Response(JSON.stringify({ 
        error: 'N√£o foi poss√≠vel interpretar a resposta da OpenAI. Tente novamente ou refine sua solicita√ß√£o.',
        rawContent: analysisData.choices[0]?.message?.content || null
      }), { status: 500 });
    }

    if (analysis.erro) {
      return new Response(JSON.stringify({ 
        isDocument: false,
        response: `Entendi sua pergunta. Para gerar documentos, voc√™ pode solicitar:

üìã **"Gere um DFD para..."** - Documento de Formaliza√ß√£o de Demanda
üìã **"Preciso de um ETP para..."** - Estudo T√©cnico Preliminar  
üìã **"Crie um TR para..."** - Termo de Refer√™ncia

Exemplo: "Gere um DFD para contrata√ß√£o de servi√ßos de limpeza, valor estimado R$ 50.000, prazo 12 meses"

Como posso ajud√°-lo?`
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Gerar documento baseado no template
    const template = documentTemplates[analysis.tipo_documento as keyof typeof documentTemplates];
    let documentContent = template;

    // Substituir placeholders com dados extra√≠dos
    Object.entries(analysis.dados).forEach(([key, value]) => {
      if (value) {
        documentContent = documentContent.replace(
          new RegExp(`{${key}}`, 'g'),
          value as string
        );
      }
    });

    // Limpar placeholders n√£o substitu√≠dos
    documentContent = documentContent.replace(/{[^}]+}/g, 'N√£o especificado');

    // Salvar documento no banco
    const supabase = createClient(supabaseUrl!, supabaseKey!);

    const { data: document, error } = await supabase
      .from('documents')
      .insert({
        user_id: userId,
        title: analysis.titulo,
        type: analysis.tipo_documento,
        status: 'completed',
        content: analysis.dados,
        generated_text: documentContent
      })
      .select()
      .single();

    if (error) {
      console.error('Erro ao salvar documento:', error);
      throw error;
    }

    const documentTypeNames = {
      dfd: 'DFD - Documento de Formaliza√ß√£o de Demanda',
      etp: 'ETP - Estudo T√©cnico Preliminar',
      tr: 'TR - Termo de Refer√™ncia'
    };

    return new Response(JSON.stringify({
      isDocument: true,
      documentId: document.id,
      documentType: analysis.tipo_documento,
      response: `‚úÖ **${documentTypeNames[analysis.tipo_documento as keyof typeof documentTypeNames]}** gerado com sucesso!

**T√≠tulo:** ${analysis.titulo}

O documento foi salvo na sua biblioteca e est√° pronto para download. Voc√™ pode:
- üìã Visualizar na aba "Documentos"
- üì• Fazer download em PDF
- ‚úèÔ∏è Editar se necess√°rio

Gostaria que eu fa√ßa alguma altera√ß√£o no documento ou precisa de ajuda com algo mais?`,
      documentContent
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Erro na gera√ß√£o do documento:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro ao gerar documento: ' + (error instanceof Error ? error.message : String(error))
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
